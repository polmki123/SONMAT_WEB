<div id="page-start"></div>

<section class="main-container">

    <div class="container">
        <div class="row">

            <!-- main start -->
            <!-- ================ -->
                <div class="main col-12">
                    <!-- page-title start -->
                    <!-- ================ -->

                    <br/>
                    <br/>
                    <form class="form-group">
                        <div class="row">

                            <div class="col-lg-12">
                                <input type="email" class="form-control" name="inputEmail" placeholder="이메일을 입력하세요">
                            </div>
                        </div>
                        <br/>
                        <br/>
                        <div class="row">
                            <div class="col-lg-12">
                                <input class="form-control" type="text" name="inputTitle" placeholder="제목을 입력하세요">
                            </div>
                        </div>
                        <div class="separator"></div>

                        <div id="summernote" name="inputContents"></div>
                        <div class="separator"></div>
                        <div class="text-right">
                            <button type="button" class="btn btn-success" id="upload_btn"><i class="fa fa-save"></i>저장</button>
                        </div>
                    </form>
                </div>


            <!-- main end -->

        </div>
    </div>
</section>

<script type="text/javascript">

    // 에디터에 등록할 대표 폰트 리스트
    var main_font_list = <%- JSON.stringify(main_font_list) %>;

    // 실제 사용되는 변형 폰트 리스트
    var variation_font_list = <%- JSON.stringify(variation_font_list) %>;

    // 모든 폰트를 font-face에 등록
    register_font_to_font_face(main_font_list);
    register_font_to_font_face(variation_font_list);

    // 대표 폰트 등록된 summernote 생성
    var editor = init_summertnote(main_font_list);

    // summernote.change font
    editor.on('summernote.change', function(we, e) {

        // TODO key filter

        /*var clear_text = editor.summernote('code').replace(/<\/p>/gi, "\n")
            .replace(/<br\/?>/gi, "\n")
            .replace(/<\/?[^>]+(>|$)/g, "");

        console.log(clear_text);

        var randomFont = getRandomFont();
        //console.log(randomFont);
        editor.summernote('fontName' , randomFont);*/

    });





    function register_font_to_font_face(font_list) {
        font_list.forEach(function(font) {
            var font_face = new FontFace(font.font_name, 'url(/api/files/?path=' + font.file_path + ')');

            // 폰트 load
            font_face.load().then(function(loaded_face) {
                // load 된 폰트 추가
                document.fonts.add(loaded_face);
            }).catch(function(error) { });
        });
    }

    function init_summertnote(font_list) {

        var font_name_list = [];
        font_list.forEach(function(font) {
            font_name_list.push(font.font_name);
        });

        return $('#summernote').summernote({
            placeholder: '당신의 손글씨가 담긴 편지로 마음을 전해보세요',
            tabsize: 2,
            height: 400,
            fontNames: font_name_list,
            fontNamesIgnoreCheck: font_name_list
            //toolbar : false
        });
    }

   /* function getRandomInt(min, max) {
        min = Math.ceil(min);
        max = Math.floor(max);
        return Math.floor(Math.random() * (max - min + 1)) + min;
    }

    function getRandomFont() {
        var randomFontIndex = getRandomInt(0 , temp_font_list.length);
        return temp_font_list[randomFontIndex];
    }

    */

    $.fn.extend({
        placeCursorAtEnd: function() {
            // Places the cursor at the end of a contenteditable container (should also work for textarea / input)
            if (this.length === 0) {
                throw new Error("Cannot manipulate an element if there is no element!");
            }
            var el = this[0];
            var range = document.createRange();
            var sel = window.getSelection();
            var childLength = el.childNodes.length;
            if (childLength > 0) {
                var lastNode = el.childNodes[childLength - 1];
                var lastNodeChildren = lastNode.childNodes.length;
                range.setStart(lastNode, lastNodeChildren);
                range.collapse(true);
                sel.removeAllRanges();
                sel.addRange(range);
            }
            return this;
        }
    });




        // 업로드 버튼 - click event
    $(document).on('click', '#upload_btn', function() {

        var formData = {}
        formData.email = $("input[name=inputEmail]").val()
        formData.title = $("input[name=inputTitle]").val()
        formData.contents = $("div#summernote").summernote('code');

        var MESSAGE_POST_UPLOAD_URL = '/api/message';

        function fn_success(sonmat_req_id) {
            window.location.href = "/message/to/" + sonmat_req_id;
        }

        AjaxUtils.postResult(MESSAGE_POST_UPLOAD_URL, formData, fn_success);

    });

    $(document).on('focusout', 'input[name=inputEmail]', function() {

        var formData = {}
        formData.email = $("input[name=inputEmail]").val()
        var CHECK_EMAIL_URL = '/api/message/check_email';

        function fn_success(user) {
            if (user.name == null){
                // user = {}
                $("input[name=inputEmail]").attr('class', 'form-control is-invalid');
            }else{
                // user = { id, name, .... }
                $("input[name=inputEmail]").attr('class', 'form-control is-valid');
            }
        }
        AjaxUtils.postResult(CHECK_EMAIL_URL, formData, fn_success);

    });

</script>